        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h> 
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <time.h>
        -:    9:
        -:   10:void randomTest(int player, int numPlayers, int maxDeck, int position, struct gameState g); 
        -:   11:
        -:   12:	
function main called 6 returned 100% blocks executed 100%
        6:   13:int main() {
        -:   14:	int i, j; 
        6:   15:	int numTests = 20000; 
        -:   16:	int numPlayers; 
        -:   17:	int maxDeck; 
        -:   18:	int position; 
        6:   19:	int player = 0; 
        -:   20:	struct gameState g; 
        6:   21:	int k[10] = {duchy, gardens, province, estate, tribute, mine, cutpurse, ambassador, great_hall, adventurer}; 
        6:   22:	int deckSize = 27; 
        -:   23:
        6:   24:	srand(time(NULL)); 
call    0 returned 100%
call    1 returned 100%
        -:   25:
        6:   26:	printf("Testing Adventurer card \n"); 
call    0 returned 100%
   120006:   27:	for(i = 0; i < numTests; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   120000:   28:		numPlayers = (rand()%3)+2; 				// rand num of players
call    0 returned 100%
   120000:   29:		initializeGame(numPlayers, k, 1000, &g); 
call    0 returned 100%
   120000:   30:		maxDeck = rand()%deckSize + 1;  		// rand deck size
call    0 returned 100%
   120000:   31:		g.deckCount[player] = maxDeck; 
   120000:   32:		g.handCount[player] = rand()%6 + 1; 			// rand starting hand
call    0 returned 100%
   120000:   33:		position = rand()%g.handCount[player] + 1; 
call    0 returned 100%
   120000:   34:		g.hand[player][position] = adventurer; 	
  1796464:   35:		for(j = 0; j < maxDeck; j++) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
  1676464:   36:			if(j == position) 
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
   109987:   37:				continue; 
  1566477:   38:			g.deck[player][j] = rand()%17+1; 
call    0 returned 100%
        -:   39:		}
        -:   40:	}
        -:   41:
        6:   42:	printf("Inputs: \nDeck size: %d\n Hand Count: %d\n Players: %d\nPosition: %d\n", maxDeck, g.handCount[player], numPlayers, position); 
call    0 returned 100%
        -:   43:
        6:   44:	randomTest(player, numPlayers, maxDeck, position, g); 
call    0 returned 100%
        -:   45:
        6:   46:	return 0; 
        -:   47:
        -:   48:}
        -:   49:
function randomTest called 6 returned 100% blocks executed 78%
        6:   50:void randomTest(int player, int numPlayers, int maxDeck, int position, struct gameState g) {
        -:   51:	int j; 
        6:   52:	int player2 = 1; 
        -:   53:	int preCount; 
        6:   54:	int amount = 0; 
        -:   55:	int preAmount; 
        -:   56:	struct gameState testState; 
        -:   57:
        6:   58:	printf("\nTest - Play adventurer card until two coins are drawn\n"); 
call    0 returned 100%
        6:   59:	memcpy(&testState, &g, sizeof(struct gameState)); 
        6:   60:	preCount = g.coins; 
        6:   61:	amount = 0; 
        6:   62:	printf("Coin cards in hand originally - "); 
call    0 returned 100%
       24:   63:	for(j = 0; j < testState.handCount[player]; j++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       18:   64:		if(testState.hand[player][j] == copper) {
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
       11:   65:			printf("copper, "); 
call    0 returned 100%
       11:   66:			preAmount += 1; 
       11:   67:			preCount++; 
        -:   68:		}
       18:   69:		if(testState.hand[player][j] == silver) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   70:			printf("silver, "); 
call    0 never executed
    #####:   71:			preAmount += 2; 			// increment by silver val
    #####:   72:			preCount++; 
        -:   73:		}
       18:   74:		if(testState.hand[player][j] == gold){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   75:			printf("gold, "); 
call    0 never executed
    #####:   76:			preAmount += 3; 
    #####:   77:			preCount++; 
        -:   78:		}
       18:   79:		printf("\n"); 
call    0 returned 100%
        -:   80:	}
        6:   81:	cardEffect(adventurer, 0, 0, 0, &testState, 0, 0); 
call    0 returned 100%
        6:   82:	printf("Cards found: "); 
call    0 returned 100%
     2097:   83:	for(j = 0; j < testState.handCount[player]; j++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     2091:   84:		if(testState.hand[player][j] == copper){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       18:   85:			printf("copper, "); 
call    0 returned 100%
       18:   86:			amount+= 1; 				// increment by copper val
        -:   87:		}
     2091:   88:		if(testState.hand[player][j] == silver){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        7:   89:			printf("silver, "); 
call    0 returned 100%
        7:   90:			amount+= 2; 				// increment by silver val
        -:   91:		}
     2091:   92:		if(testState.hand[player][j] == gold){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        2:   93:			printf("gold, "); 
call    0 returned 100%
        2:   94:			amount+= 3; 				// increment by gold val
        -:   95:		}
        -:   96:	}
        -:   97:
        6:   98:	printf("\n"); 
call    0 returned 100%
        6:   99:	if(amount == testState.coins) 		// should only pull two coin cards
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  100:		printf("Passed. Expected %d finished amount: %d\n", amount, testState.coins); 
call    0 never executed
        -:  101:	else
        6:  102:		printf("Failed. Expected: %d received: %d\n", amount, testState.coins); 
call    0 returned 100%
        -:  103:
        6:  104:	printf("Test - gained proper amount of cards: \n"); 
call    0 returned 100%
        6:  105:	if(testState.handCount[player2] == g.handCount[player2]) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  106:		printf("Passed - hand size start: %d hand size finish: %d\n", g.handCount[player2], testState.handCount[player2]); 
call    0 never executed
        -:  107:	else 
        6:  108:		printf("Failed - hand size start: %d hand size finish: %d\n", g.handCount[player2], testState.handCount[player2]);
call    0 returned 100%
        -:  109:
        6:  110:	printf("Test - proper amount of cards should be in the deck\n"); 			// no extra cards should be removed
call    0 returned 100%
        6:  111:	if(g.deckCount[player] - testState.discardCount[player] - 2 == testState.deckCount[player])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  112:		printf("Passed - expected deck: %d, deck actual: %d\n", g.deckCount[player] - testState.discardCount[player] - 2, testState.deckCount[player]); 
call    0 never executed
        -:  113:	else
        6:  114:		printf("Failed - expected deck: %d, deck actual: %d\n", g.deckCount[player] - testState.discardCount[player] - 2, testState.deckCount[player]);
call    0 returned 100%
        -:  115:
        6:  116:	printf("Test - adventurer card added to played pile after using\n"); 
call    0 returned 100%
        6:  117:	if(testState.playedCardCount = 1) 
        6:  118:		printf("Passed - expected played pile to increase by %d, actually increased by %d\n", 1, testState.playedCardCount); 
call    0 returned 100%
        -:  119:	else 
        -:  120:		printf("Failed - expected played pile to increase by %d, actually increased by %d\n", 1, testState.playedCardCount);
        -:  121:
        6:  122:	printf("Test - test supply counts for treasures were given out\n"); 
call    0 returned 100%
        6:  123:	if(g.supplyCount[copper] != testState.supplyCount[copper])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  124:		printf("Failed - mismatch of copper, expected %d, received %d\n", g.supplyCount[copper], testState.supplyCount[copper]);
call    0 never executed
        6:  125:	if(g.supplyCount[silver] != testState.supplyCount[silver])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  126:		printf("Failed - mismatch of copper, expected %d, received %d\n", g.supplyCount[silver], testState.supplyCount[silver]);
call    0 never executed
        6:  127:	if(g.supplyCount[gold] != testState.supplyCount[gold])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  128:		printf("Failed - mismatch of copper, expected %d, received %d\n", g.supplyCount[gold], testState.supplyCount[gold]);
call    0 never executed
        -:  129:
        -:  130:	else 
        6:  131:		printf("Passed - all supply counts passed\n"); 
call    0 returned 100%
        -:  132:
        6:  133:	printf("Test - test supply counts for points match\n"); 
call    0 returned 100%
        6:  134:	if(g.supplyCount[estate] != testState.supplyCount[estate])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  135:		printf("Failed, expected %d estates, actual %d\n", g.supplyCount[estate], testState.supplyCount[estate]); 
call    0 never executed
        6:  136:	if(g.supplyCount[duchy] != testState.supplyCount[duchy])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  137:		printf("Failed, expected %d duchy, actual %d\n", g.supplyCount[duchy], testState.supplyCount[duchy]); 
call    0 never executed
        6:  138:	if(g.supplyCount[province] != testState.supplyCount[province])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  139:		printf("Failed, expected %d provinces, actual %d\n", g.supplyCount[province], testState.supplyCount[province]); 
call    0 never executed
        6:  140:	if(g.supplyCount[curse] != testState.supplyCount[curse])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  141:		printf("Failed, expected %d curses, actual %d\n", g.supplyCount[curse], testState.supplyCount[curse]);
call    0 never executed
        -:  142:
        -:  143:	else 
        6:  144:		printf("Passed - supply counts for victory cards and curses equal\n"); 
call    0 returned 100%
        6:  145:}
